@module ajax-request-events
@info Sends some information to the server using $.ajax
@see https://github.com/jqapi/jqapi#p=jQuery.ajax

#-----------------------------------------------------------------------

@attribute <b>data-ajax-request-on-events</b>
@type string
@description This attribute identifies the events that will trigger the reload ajax function.
@graphicexample {Request on click}
<!-- status error, expected, test.php doesn't exist -->
<button data-ajax-request-on-events="'click'"
 data-ajax-request-url="'test.php'"
 data-ajax-request-complete="function(jqXHR,status){alert('request done status: ' + status)}"
 class="btn btn-primary">
  Click me to make a request
</button>
{Request on click}

#-----------------------------------------------------------------------

@attribute <b>data-ajax-request-type</b> (Alive)
@type string[get,post]
@description This attribute identifies the type of request GET or POST, defaults to GET.
@example {POST on click}
<html>
    <body>
        <button data-ajax-request-on-events="'click'"
         data-ajax-request-url="'test.php'"
         data-ajax-request-type="'POST'">
            Click me
        </button>
    </body>
</html>
{POST on click}

#-----------------------------------------------------------------------

@attribute <b>data-ajax-request-url</b> (Alive)
@type string
@description sets the url that will be used for the request ::hash:: gets translated to the current hash.
@example {POST on hashchange}
<html>
    <body>
        <button id="btn"
         data-ajax-request-on-events="'hashchange'"
         data-ajax-request-url="'::hash::.php'"
         data-ajax-request-type="'POST'">
            Change my content via hashchange
        </button>
    </body>
    <script>
    	addEventListener("hashchange",
    	    function(event)
    	    {
    	        $("#btn").trigger("hashchange")
    	    }
    	)
    </script>
</html>
{POST on hashchange}

#-----------------------------------------------------------------------

@attribute <b>data-ajax-request-data-query</b> (Alive)
@type object
@description (from jqapi) Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting.

@graphicexample {1. GET on click}
<!-- Check your network, this will fail anyway -->
<button class="btn btn-primary btn-lg"
 data-ajax-request-on-events="'click'"
 data-ajax-request-url="'test.php'"
 data-ajax-request-data-query="{'param':'data','secondParam':'moredata'}">
  GET
</button>
{1. GET on click}

@example {2. Resulting GET}
GET : test.php?param=data&secondParam=moredata
{2. Resulting GET}

@graphicexample {3. POST on click}
<!-- Check your network, this will fail anyway -->
<button class="btn btn-primary btn-lg"
 data-ajax-request-on-events="'click'"
 data-ajax-request-url="'test.php'"
 data-ajax-request-type="'post'"
 data-ajax-request-data-query="{'param':'data','secondParam':'moredata'}">
  POST
</button>
{3. POST on click}

@example {4. Resulting POST}
POST : test.php
PARAMS :
    param : data
    secondParam : moredata
{4. Resulting POST}

#-----------------------------------------------------------------------

@attribute <b>data-ajax-request-data-query-_*_</b> (Alive)
@type object
@description (metaobject) Can be mixed with ajax-request-data-query (from jqapi) Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting.

@graphicexample {1. GET on click}
<!-- Check your network, this will fail anyway -->
<button class="btn btn-primary btn-lg"
 data-ajax-request-on-events="'click'"
 data-ajax-request-url="'test.php'"
 data-ajax-request-data-query-_param_="'data'"
 data-ajax-request-data-query-_secondParam_="'moredata'">
  GET
</button>
{1. GET on click}

@example {2. Resulting GET}
GET : test.php?param=data&secondParam=moredata
{2. Resulting GET}

@graphicexample {3. POST on click}
<!-- Check your network, this will fail anyway -->
<button class="btn btn-primary btn-lg"
 data-ajax-request-on-events="'click'"
 data-ajax-request-url="'test.php'"
 data-ajax-request-type="'post'"
 data-ajax-request-data-query-_param_="'data'"
 data-ajax-request-data-query-_secondparam_="'moredata'">
  POST
</button>
{3. POST on click}

@example {4. Resulting POST}
POST : test.php
PARAMS :
    param : data
    secondparam : moredata
{4. Resulting POST}

#-----------------------------------------------------------------------

@attribute <b>data-ajax-request-input-group</b> (Alive)
@type selector
@description Will use those inputs as part of the data, using the attribute "name" as the parameter name and the value as the parameter value, checkboxes and radios without values will send an empty string.
@graphicexample {GET on click}
<!-- Check your network, this will fail anyway -->
<input type="text" value="myData" name="myInput"></input>
<button class="btn btn-primary btn-lg"
 data-ajax-request-on-events="'click'"
 data-ajax-request-url="'test.php'"
 data-ajax-request-data-query="{'param':'data','secondParam':'moredata'}"
 data-ajax-request-input-group="'::prev input'">
  Send that value
</button>
{GET on click}

@example {Resulting GET}
GET : test.php?param=data&secondParam=moredata&myInput=myData
{Resulting GET}

#-----------------------------------------------------------------------

@attribute data-ajax-request-send-lang (Alive)
@type boolean
@description Defaults to false, will add a "lang" param to your data with the current lang (used for enclosed content) if avaliable.

@graphicexample {3. POST on click}
<!-- Check your network, this will fail anyway -->
<button lang="es" class="btn btn-primary btn-lg"
 data-ajax-request-on-events="'click'"
 data-ajax-request-url="'test.php'"
 data-ajax-request-send-lang="true">
  GET with lang es
</button>
{3. POST on click}

#-----------------------------------------------------------------------

@attribute data-ajax-request-username (Alive)
@type string
@description (from jqapi) An username to be used with XMLHttpRequest in response to an HTTP access authentication request. 

#-----------------------------------------------------------------------

@attribute data-ajax-request-password (Alive)
@type string
@description (from jqapi) A password to be used with XMLHttpRequest in response to an HTTP access authentication request

@attribute <b>data-ajax-request-on-_*_</b> (Alive)
@type function(textStatus)
@description (metaobject) Replace * with the number of the status and write a function to execute when the response comes and got that status

@example {Login}

<div>

  <input type="text" name="user">
  <input type="email" name="email">
  <input type="password" name="password">
  
  <button
   data-ajax-request-on-events="'click'"
   data-ajax-request-url="'login.php'"
   data-ajax-request-type="'post'"
   data-ajax-request-input-group="'::prevAll input'"
   data-ajax-request-on-_200_="function(textStatus){location.assign('index.html')}"
   data-ajax-request-on-_404_="function(textStatus){alert('login failed')}"
    >Login</button>
    
</div>

{Login}

@graphicexample {Webpage checker}

<input type="text">
  
<button
 class="btn btn-primary btn-lg"
 data-ajax-request-on-events="'click'"
 data-ajax-request-url="#function(){return $(this).prev().val()}"
 data-ajax-request-on-_200_="function(){alert('Exists')}"
 data-ajax-request-on-_404_="function(){alert('Does not exist')}"
 data-ajax-request-on-_403_="function(){alert('Exists but you cannot access')}"
 data-ajax-request-on-_500_="function(){alert('Woops we broke something')}"
  >Check Status</button>

{Webpage checker}

#-----------------------------------------------------------------------

@attribute data-ajax-request-datatype (Alive)
@type string
@description (from jqapi) The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string).

#-----------------------------------------------------------------------

@attribute data-ajax-request-timeout (Alive)
@type number
@description (from jqapi) Set a timeout (in milliseconds) for the request. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.

#-----------------------------------------------------------------------

@attribute data-ajax-request-cross-domain (Alive)
@type boolean
@description (from jqapi) If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. ( version added: 1.5 )

#-----------------------------------------------------------------------

@attribute data-ajax-request-global (Alive)
@type boolean
@description (from jqapi) Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events.

#-----------------------------------------------------------------------

@attribute data-ajax-request-headers (Alive)
@type object
@description (from jqapi) An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. ( version added: 1.5 )

#-----------------------------------------------------------------------

@attribute data-ajax-request-if-modified (Alive)
@type boolean
@description (from jqapi) Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. 

#-----------------------------------------------------------------------

@attribute data-ajax-request-content-type (Alive)
@type string
@description (from jqapi) When sending data to the server, use this content type. Default is "application/x-www-form-urlencoded; charset=UTF-8", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding.

#-----------------------------------------------------------------------

@attribute data-ajax-request-accepts (Alive)
@type object
@description (from jqapi) The content type sent in the request header that tells the server what kind of response it will accept in return.

#-----------------------------------------------------------------------

@attribute data-ajax-request-async (Alive)
@type boolean
@description (from jqapi) By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: "jsonp" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success/error/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done() or the deprecated jqXHR.success().

#-----------------------------------------------------------------------

@attribute data-ajax-request-cache (Alive)
@type boolean
@description (from jqapi) If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending "_={timestamp}" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. 

#-----------------------------------------------------------------------

@attribute data-ajax-request-contents (Alive)
@type object
@description (from jqapi) An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type. ( version added: 1.5 )

#-----------------------------------------------------------------------

@attribute data-ajax-request-converters (Alive)
@type object
@description (from jqapi) An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. ( version added: 1.5 )

#-----------------------------------------------------------------------

@attribute data-ajax-request-beforesend (Alive)
@type function(jqXHR jqXHR, PlainObject settings)->boolean
@description (from jqapi) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request.

#-----------------------------------------------------------------------

@attribute <b>data-ajax-request-success</b> (Alive)
@type function (PlainObject data, String textStatus, jqXHR jqXHR)
@description (from jqapi) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.

#-----------------------------------------------------------------------

@attribute <b>data-ajax-request-error</b> (Alive)
@type function (jqXHR jqXHR, String textStatus, String errorThrown) 
@description (from jqapi) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are "timeout", "error", "abort", and "parsererror". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as "Not Found" or "Internal Server Error." As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note:This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event.

#-----------------------------------------------------------------------

@attribute <b>data-ajax-request-complete</b> (Alive)
@type function (jqXHR jqXHR, String textStatus) 
@description (from jqapi) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request ("success", "notmodified", "error", "timeout", "abort", or "parsererror"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. 

#-----------------------------------------------------------------------

@attribute data-ajax-request-data-filter (Alive)
@type function(String data, String type) -> Object
@description (from jqapi) A function to be used to handle the raw response data of XMLHttpRequest.This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. 

#-----------------------------------------------------------------------

@attribute data-ajax-request-is-local (Alive)
@type boolean
@description (from jqapi) Allow the current environment to be recognized as "local," (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. ( version added: 1.5.1 )

#-----------------------------------------------------------------------

@attribute data-ajax-request-jsonp (Alive)
@type string
@description (from jqapi) Override the callback function name in a jsonp request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the "?callback" string to the URL or attempting to use "=?" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: "callbackName" }

#-----------------------------------------------------------------------

@attribute data-ajax-request-jsonp-callback (Alive)
@type string|function
@description (from jqapi) Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function.

#-----------------------------------------------------------------------

@attribute data-ajax-request-context (Alive)
@type object
@description (from jqapi) This object will be made the context of all Ajax-related callbacks. By default, the context is an object that represents the ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax)

#-----------------------------------------------------------------------

@attribute data-ajax-request-mime-type (Alive)
@type object
@description (from jqapi) A mime type to override the XHR mime type. ( version added: 1.5.1 ) 

#-----------------------------------------------------------------------

@attribute data-ajax-request-process-data (Alive)
@type boolean
@description (from jqapi) By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type "application/x-www-form-urlencoded". If you want to send a DOMDocument, or other non-processed data, set this option to false.

#-----------------------------------------------------------------------

@attribute data-ajax-request-script-charset (Alive)
@type string
@description (from jqapi) Only applies when the "script" transport is used (e.g., cross-domain requests with "jsonp" or "script" dataType and "GET" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. 

#-----------------------------------------------------------------------

@attribute data-ajax-request-status-code (Alive)
@type string

#-----------------------------------------------------------------------

@attribute data-ajax-request-traditional (Alive)
@type boolean
@description (from jqapi) Set this to true if you wish to use the traditional style of param serialization.

#-----------------------------------------------------------------------

@attribute data-ajax-request-xhr (Alive)
@type function
@description (from jqapi) Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.

#-----------------------------------------------------------------------

@attribute data-ajax-request-xhr-fields (Alive)
@type object

#-----------------

@metaattribute data-ajax-request-events-binds
@description Contains the events that were bind, they're used when .jCheetahUnloadAjaxRequestEvents is ran, do not coerce a value.