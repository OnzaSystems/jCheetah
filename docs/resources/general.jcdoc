@module General information about jCheetah
@info What you need to know
@contents <div class="panel panel-default"><div class="panel-body"><h2>What's jCheetah?</h2><p>jCheetah is a simple framework designed to handle data via attributes. It uses json (as first option) and javascript data style to get its input and keeps tracks of every change in the DOM.<p><h2>Data types</h2><p>There are 6 basic types to use in jCheetah, these are:</p><ul><li><b>booleans</b> : <b style="color:blue">attribute</b>=<i style="color:green">"true"</i> <b>|</b> <b style="color:blue">attribute</b>=<i style="color:green">'false'</i></li><li><b>numbers</b> : <b style="color:blue">attribute</b>=<i style="color:green">"1"</i> <b>|</b> <b style="color:blue">attribute</b>=<i style="color:green">'1'</i></li><li><b>strings</b> : <b style="color:blue">attribute</b>=<i style="color:green">"'strings do not need 'escaping' but be careful with html'"</i> <b>|<br></b> <b style="color:blue">attribute</b>=<i style="color:green">'"string"'</i></li><li><b>arrays (using json)</b> : <b style="color:blue">attribute</b>=<i style="color:green">"['a','e',1,2]"</i> <b>|</b> <b style="color:blue">attribute</b>=<i style="color:green">'["a","e",1,2]'</i></li><li><b>arrays (using javascript)</b> : <b style="color:blue">attribute</b>=<i style="color:green">"['a',function(){console.log('alert')}]"</i> <b>|</b> <b style="color:blue">attribute</b>=<i style="color:green">'["a",function(){console.log("alert")}]'</i></li><li><b>objects (using json)</b> : <b style="color:blue">attribute</b>=<i style="color:green">"{'a':1}"</i> <b>|</b> <b style="color:blue">attribute</b>=<i style="color:green">'{"a":1}'</i> </li><li><b>objects (using javascript)</b> : <b style="color:blue">attribute</b>=<i style="color:green">"{'a':1,b:console.log}"</i> <b>|</b> <b style="color:blue">attribute</b>=<i style="color:green">'{"a":1,b:console.log}'</i></li><li><b>functions (using general accesors)</b> : <b style="color:blue">attribute</b>=<i style="color:green">"simpleFunction"</i> <b>|</b> <b style="color:blue">attribute</b>=<i style="color:green">'$.ajax'</i></li><li><b>functions (using complex accesors)</b> : <b style="color:blue">attribute</b>=<i style="color:green">"function(){return 1}"</i> <b>|</b> <b style="color:blue">attribute</b>=<i style="color:green">'$("#item").bind'</i></li></ul><p>Note that complex accesors take more memory usage than general accesors, and actually should be avoided as much as possible.</p><p>For simplicity purposes they're quite used in this documentation, however, avoid them.</p><h2>Variable accesors</h2><p>Considering you need to give a particular element a variable data depending to the situation you can use the general notation:</p><ul><li><b>General variable accesor (access an element directly from an object)</b> : <b style="color:blue">attribute</b>=<i style="color:green">"location.hash"</i></li><li><b>Complex variable accesor (access an element from diverse ways, even generates it)</b> : <b style="color:blue">attribute</b>=<i style="color:green">"data[1].name()['id']"</i> <b>|</b> <b style="color:blue">attribute</b>=<i style="color:green">"function(){return 1}"</i></li><li><b>Parsed variable accesor (access an function and gets its return value, general accesor)</b> : <b style="color:blue">attribute</b>=<i style="color:green">"#callfunc"</i></li><li><b>Parsed variable accesor (access an function and gets its return value, complex accesor)</b> : <b style="color:blue">attribute</b>=<i style="color:green">"#funclist[10].func"</i></li></ul><p>Parsed variable accesors send the following data (as the first argument) to the function, these are:</p><ul><li><b>arg.acceptedTypes</b> : an array of strings containg the type that it expects "array","boolean","function","number","object" or "string"</li><li><b>arg.acceptOnly</b> : an array contaning the data that it is supposed to accept (must be equal to one of those)</li><li><b>arg.attribute</b> : the attribute that is supposed to set</li><li><b>arg.element</b> : the element that called this function</li><li><b>arg.event</b> : the event (or undefined) within this function is called</li></ul><h2>Traversing Selectors</h2><p>A traversing selector is a special sort of string that uses the same rules as jQuery and supports chaining, it uses "::" as the main element to note that it's a selector, the keyword "::this" represents the current element:</p><ul><li><b>Single</b> : <b style="color:blue">attribute</b>=<i style="color:green">"'::next'"</i></li><li><b>Single with argument</b> : <b style="color:blue">attribute</b>=<i style="color:green">"'::prev div'"</i></li><li><b>Chaining</b> : <b style="color:blue">attribute</b>=<i style="color:green">"'::this ::parent ::next table ::find td'"</i></li></ul><h2>Modify/Delete attributes</h2><p>Modifying attributes via jQuery default attr function will probably not have any effect on jCheetah element's expression</p><p>$(<i style="color:green">'#item'</i>).attr(<i style="color:green">'jcevents'</i>,<i style="color:green">'mouseover'</i>);</p><p>You should instead use attrjCheetah</p><p>$(<i style="color:green">'#item'</i>).attrjCheetah(<i style="color:green">'jcevents'</i>,<i style="color:green">'mouseover'</i>);</p><p>$(<i style="color:green">'#item'</i>).attrjCheetah(<i style="color:green">'ajax-data'</i>,{id:1,name:<i style="color:green">'jonh'</i>});</p><p>You can also retrieve data from attrjCheetah, it will parse json data, javascript data, seek for an element in the DOM and even run the functions defined to get its result; nevertheless traversing selectors are given as strings</p><p>$(<i style="color:green">'#item'</i>).attrjCheetah(<i style="color:green">'ajax-data'</i>);</p><p>There's also a removeAttrjCheetah, that will run all the triggers to update the element with that lack of data</p><p>$(<i style="color:green">'#item'</i>).removeAttrjCheetah(<i style="color:green">'ajax-events'</i>);<br><i style="color:gray">//the element loses its ajax capabilities</i></p></div></div>
